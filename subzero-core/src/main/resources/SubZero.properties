####################################################################
# SubZero Configuration 

# - Base Folder Path : can be used in other properties with the token {basefolder} (only used for token replacement)
#subzero.basefolder.path=F:/[INCOMING]/subzero
#subzero.basefolder.path=/workingfolder
subzero.basefolder.path=N:/Series

# - MKVMerge path : path to MKVMerge tool (required). Minimum version : 9.1.0 (32-bits or 64-bits)
#   Download at : https://mkvtoolnix.download/downloads.html
#	Can be referenced in other properties with token {mkvmergePath}
#subzero.mkvmerge.path=mkvmerge
subzero.mkvmerge.path=C:/Program Files/MKVToolNix/mkvmerge.exe

# - Working Folder : path to the folder containing video files to process by SubZero
#	Can be referenced in other properties with token {workingfolder}
#subzero.outputfolder.path={basefolder}/input
subzero.workingfolder.path={basefolder}

# - Working Folder : if set to true, the working folder is processed recursively (with subfolders)
subzero.workingfolder.recursive.mode=true

# - Working Folder : list of folder names to exclude from processing (if recursive mode enabled)
#	Multiple values authorized (separator ";")
subzero.workingfolder.excludes=[OLD];[BACKUP]

# - Working Folder : if set to true, files from working folder (and subfolders in recursive mode) will be processed in shuffled order (randomize processing order) 
subzero.workingfolder.shuffle.mode=true

# - Output Folder Path : destination path where processed files will be moved.
#   If empty or commented : input files will be replaced by processed files (recommended for working folder recursive mode) 
#	The following tokens are available : {serie}, {season}
#subzero.outputfolder.path={basefolder}/{serie}/Saison {season}
#subzero.outputfolder.path={basefolder}/output

# - SubLeecher languages to use : the program will try to download the first language with each SubLeecher plug-in, 
#	before trying with the second language, etc. Multiple values authorized (separator ";")
subzero.subleecher.languages=French;English

# - SubLeecher release group required : true of false. If true and if the video input file has a release group specified in filename,
#	then only subtitles matching this release group will be downloaded
subzero.subleecher.releasegroup.required=true

# - SubLeecher release group fake list : list of release group to ignore in subtitle search (populated by SickBeard, SickRage, etc)
#   Multiple values authorized (separator ";")
subzero.subleecher.releasegroup.fake.list=SiCKBEARD;SickRage

# - SubChecker bypass keywords : for each language configured in property 'subzero.subleecher.languages', 
#   if the video files to process contain one of these keywords in filename, no subtitle search is required (skip files)
#   Multiple values authorized (separator ";")
subzero.subchecker.bypass.keywords.french=.french.;.truefrench.;.vostfr.

# - SubChecker plug-in to use : the plug-ins will be used in the specified order until an internal subtitle is found in video file.
#	Multiple values authorized (separator ";")
#   Plug-ins available:
#		org.subzero.core.plugin.SubCheckerNull			=> No plugin (no subtitle check)
#		org.subzero.core.plugin.SubCheckerMkv			=> checks internal subtitles for MKV files
subzero.subchecker.plugins=org.subzero.core.plugin.SubCheckerMkv

# - SubCheckerMkv plug-in parameter : for each language configured in property 'subzero.subleecher.languages', 
#   if the property value is 'true', then no process is required if the video file contains an audio track of the given language
plugin.subcheckermkv.check.audio.track.french=true
plugin.subcheckermkv.check.audio.track.english=false

# - SubCheckerMkv plug-in parameter : video file extensions to process as MKV files by the plugin
#   Note : these extensions must also be configured in parameter 'subzero.videofile.extensions'
#	Multiple values authorized (separator ";")
plugin.subcheckermkv.videofile.extensions=mkv

# - SubCheckerMkv plug-in parameter : MKVMerge.exe command line to use to retrieve existing audio & subtitle tracks' language in JSON format
#	Token available : {mkvmergePath}, {language}, {inputVideoFilePath}
#	Note: MKVMerge must be installed before use
plugin.subcheckermkv.mkvmerge.commandline.0={mkvmergePath}
plugin.subcheckermkv.mkvmerge.commandline.1=--output-charset
plugin.subcheckermkv.mkvmerge.commandline.2=UTF-8
plugin.subcheckermkv.mkvmerge.commandline.3=--identification-format
plugin.subcheckermkv.mkvmerge.commandline.4=json
plugin.subcheckermkv.mkvmerge.commandline.5=--identify
plugin.subcheckermkv.mkvmerge.commandline.6={inputVideoFilePath}

# - SubLeecher plug-in to use : the plug-ins will be used in the specified order until a matching subtitle is found
#	Multiple values authorized (separator ";")
#   Plug-ins available:
#		org.subzero.core.plugin.SubLeecherNull			=> No plugin (no subtitle leech)
#		org.subzero.core.plugin.SubLeecherAddicted		=> http://www.addic7ed.com		(support of release group detection)
#   	org.subzero.core.plugin.SubLeecherTVSubtitles	=> http://www.tvsubtitles.net	(support of release group detection)
#		org.subzero.core.plugin.SubLeecherPodnapisi		=> http://www.podnapisi.net		(support of release group detection)
#		org.subzero.core.plugin.SubLeecherOpenSubtitles	=> http://www.opensubtitles.org	(support of release group detection) (WARNING : CAPTCHA !)
subzero.subleecher.plugins=org.subzero.core.plugin.SubLeecherAddicted;org.subzero.core.plugin.SubLeecherPodnapisi;org.subzero.core.plugin.SubLeecherTVSubtitles

# - PostProcess plug-in to use : the plug-in will be used after a matching subtitle file has been downloaded
#   Plug-ins available: (choose only one plug-in)
#   	org.subzero.core.plugin.PostProcessNull				=> No plugin (disable post-processing)
#   	org.subzero.core.plugin.PostProcessMkvMergeMove		=> merge video file and subtitle in a MKV file and moves to destination (no filename change, keep original files if requested)
#		org.subzero.core.plugin.PostProcessMoveOnly			=> move video file and subtitle to destination (subtitle file suffixed with language code before extension)
subzero.postprocess.plugin=org.subzero.core.plugin.PostProcessMkvMergeMove

# - PostProcess MkvMergeMove plug-in parameter : keep original files (true or false)
#	If true, the original files (video, subtitle, ZIP) will be moved to the Ori Folder after process
#	If false, the original files are deleted after process
plugin.mkvmergemove.orifiles.keep=true

# - PostProcess MkvMergeMove plug-in parameter : Ori Folder Path to use if property 'plugin.mkvmergemove.orifiles.keep' is true
plugin.mkvmergemove.orifiles.folderpath={basefolder}/[BACKUP]

# - PostProcess MkvMergeMove plug-in parameter : MKVMerge.exe command line to use for video & subtitle merging operation
#	Token available : {mkvmergePath}, {outputFilePath}, {language}, {subFilePath}, {inputVideoFilePath}
#	Note: MKVMerge must be installed before use
plugin.mkvmergemove.mkvmerge.commandline.0={mkvmergePath}
plugin.mkvmergemove.mkvmerge.commandline.1=-o
plugin.mkvmergemove.mkvmerge.commandline.2={outputFilePath}
plugin.mkvmergemove.mkvmerge.commandline.3=--default-track
plugin.mkvmergemove.mkvmerge.commandline.4=0
plugin.mkvmergemove.mkvmerge.commandline.5=--language
plugin.mkvmergemove.mkvmerge.commandline.6=0:{language}
plugin.mkvmergemove.mkvmerge.commandline.7={subFilePath}
plugin.mkvmergemove.mkvmerge.commandline.8={inputVideoFilePath}

# - Init delay after program start (in seconds) before 1st automatic process 
subzero.automaticprocess.initdelay=1800

# - Frequency (in minutes) between each automatic process when program is running 
subzero.automaticprocess.frequency=240

# - Video file extensions to process as input
#	Multiple values authorized (separator ";")
subzero.videofile.extensions=mkv;avi;mp4;divx

# - Subtitle file extensions to process as input
#	Multiple values authorized (separator ";")
subzero.subfile.extensions=srt

# - Language suffix : added at the end of the output subtitle file name after process (before extension),
#   with tokens {language} (ex : fr, en) or {LANGUAGE} (ex : FR, EN) supported
subzero.subfile.languagesuffix={language}

# - Noise words : list of strings to delete from input video file name before process
#	Multiple values authorized (separator ";")
subzero.inputfile.noisestrings=.nzb

# - Minimum size (in MB) : minimum size of input video file to process, in megabytes, for sample files filtering (if 0, no filtering)
subzero.inputfile.minimum.size=100


####################################################################
# Log4j Logger Configuration        

# Root logger option
log4j.rootLogger=DEBUG, stdout, report, file
 
# Log level for each package
log4j.logger.org.subzero.core=DEBUG
log4j.logger.org.subzero.tool=DEBUG

# Direct log messages to stdout
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} [%-5p] (%c:%L) - %m%n
 
# Direct log messages to a log HTML report
log4j.appender.report.Threshold=INFO
log4j.appender.report=org.apache.log4j.RollingFileAppender
log4j.appender.report.File=logs/SubZero.html
log4j.appender.report.MaxFileSize=100kb
log4j.appender.report.MaxBackupIndex=10
log4j.appender.report.layout=org.subzero.core.log.SubZeroHTMLLayout
log4j.appender.report.layout.Title=SubZero Log
log4j.appender.report.layout.LocationInfo=true
 
# Direct log messages to a log file
log4j.appender.file=org.apache.log4j.RollingFileAppender
log4j.appender.file.File=logs/SubZero.log
log4j.appender.file.MaxFileSize=1MB
log4j.appender.file.MaxBackupIndex=10
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} [%-5p] (%c:%L) - %m%n

